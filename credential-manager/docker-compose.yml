version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: credential-manager-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:-password}
      MYSQL_DATABASE: ${DB_NAME:-credential_manager}
    ports:
      - "${DB_PORT:-3310}:3306"
    volumes:
      - mysql-data:/var/lib/mysql
      - ./db_schema.sql:/docker-entrypoint-initdb.d/db_schema.sql
    networks:
      - app-network
    command: --default-authentication-plugin=mysql_native_password

  # Backend API
  backend:
    build:
      context: ./backend
    container_name: credential-manager-backend
    restart: unless-stopped
    depends_on:
      - mysql
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=${PORT:-5000}
      - DB_HOST=mysql
      - DB_USER=${DB_USER:-root}
      - DB_PASSWORD=${DB_PASSWORD:-password}
      - DB_NAME=${DB_NAME:-credential_manager}
      - DB_PORT=${DB_PORT:-3310}
      - JWT_SECRET=${JWT_SECRET:-your-secret-key-change-in-production}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY:-credential-encryption-key-32chars}
      - ENCRYPTION_IV=${ENCRYPTION_IV:-credential-iv-16c}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
    # Removing volume mount that's causing ContainerConfig error
    # volumes:
    #   - ./backend:/app
    ports:
      - "${PORT:-5000}:5000"
    networks:
      - app-network

  # Frontend Application
  frontend:
    build:
      context: ./frontend
    container_name: credential-manager-frontend
    restart: unless-stopped
    depends_on:
      - backend
    environment:
      - REACT_APP_API_URL=http://localhost:${PORT:-5000}/api
    ports:
      - "3000:80"
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  mysql-data: